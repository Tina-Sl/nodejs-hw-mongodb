{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Contacts app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is documentation of contacts app"
  },
  "servers": [
    {
      "url": "https://nodejs-hw-mongodb-n71x.onrender.com",
      "description": "Production server"
    },
    {
      "url": "http://localhost:4220",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "Operations with contacts."
    },
    {
      "name": "Auth",
      "description": "Operation with authentication"
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get list of contacts",
        "operationId": "getContacts",
        "description": "**Retrieve a list of contacts**\n\nThis endpoint allows you to:\n- Filter   -- contacts by various attributes such as name, phone number, email, and more.\n- Sort     -- contacts based on any field in either ascending or descending order.\n- Paginate -- results to efficiently manage large datasets.\n\n### Security\n- Requires a valid Bearer Token to be provided in the `Authorization` header.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by contact name",
            "example": "John"
          },
          {
            "in": "query",
            "name": "isFavourite",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by whether the contact is marked as favourite.",
            "example": true
          },
          {
            "in": "query",
            "name": "contactType",
            "schema": {
              "type": "string",
              "enum": [
                "work",
                "home",
                "personal"
              ]
            },
            "description": "Filter by contact type.",
            "example": "home"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number for pagination.",
            "example": 1
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page.",
            "example": 10
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "email",
                "isFavourite"
              ]
            },
            "description": "Field by which to sort the contacts.",
            "example": "name"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            },
            "description": "Order to sort the contacts (ascending or descending).",
            "example": "ASC"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found contacts!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved contacts."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/contact"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "example": 100
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 10
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact",
        "operationId": "createContact",
        "description": "**Create a new contact**\n\nRequired Fields\n- name: The full name of the contact.\n- phoneNumber: The contact's phone number, including country code if necessary.\n- contactType: The type of contact (e.g., work, home, personal).\n\nOptional Fields\n- email: The contact's email address (optional).\n- isFavorite: A boolean flag indicating whether the contact is marked as a favorite (optional).\n- photo: An optional image file for the contact's photo.\n\n### Security\n- This endpoint requires authentication via a Bearer Token.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phoneNumber",
                  "contactType"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the contact"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "description": "The phone number of the contact"
                  },
                  "contactType": {
                    "type": "string",
                    "description": "The type of contact",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ]
                  },
                  "email": {
                    "description": "Contact's email",
                    "type": "string",
                    "example": "mia@ukr.net"
                  },
                  "isFavourite": {
                    "description": "Whether the contact is favourite",
                    "type": "boolean",
                    "example": false
                  },
                  "photo": {
                    "description": "Contact's photo",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a contact!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Retrieve a Contact by ID",
        "operationId": "getContact",
        "description": "**Retrieve a specific contact by its unique identifier.**\n\nThis endpoint allows you to fetch details of a contact using its `contactId`.\n\n### Security\n- Requires a valid Bearer Token to be provided in the `Authorization` header.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "673a821615c0be9c8ec0e6dc"
            },
            "description": "**The unique identifier of the contact.**\n\nThis `contactId` must be a valid string representing an existing contact.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "**Contact Retrieved Successfully**\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200,
                      "description": "HTTP status code"
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with id 673a821615c0be9c8ec0e6dc",
                      "description": "Human-readable message confirming the retrieval of the contact"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact",
                      "description": "The contact object containing all details"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "**Contact Not Found**\n\nThe provided `contactId` does not match any existing contact.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message",
                        "errors"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Contact not found"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete an Existing Contact",
        "operationId": "deleteContact",
        "description": "**Delete an Existing Contact**\n\nThis endpoint allows you to delete an existing contact from your list.\nOnce deleted, the contact cannot be recovered.\n\n### Security\n- This endpoint requires authentication.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the contact to be deleted.",
            "example": "6779c35e16fb05e4092b039b"
          }
        ],
        "responses": {
          "204": {
            "description": "Contact deleted successfully **  (No Content)**",
            "content": {}
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Contact not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update an Existing Contact",
        "description": "**Update specific fields of a contact by ID**\n\nThis endpoint allows you to partially update an existing contact.\nYou can modify any of the fields except for system fields and `userId`.\n\nFields that Can Be Updated\n- name: The contact's name.\n- phoneNumber: The contact's phone number, including country code if necessary.\n- email: The contact's email address (optional).\n- isFavorite: A boolean flag indicating whether the contact is marked as a favorite.\n- contactType: The type of the contact. Options include `work`, `home`, and `personal`.\n- photo: An optional file for the contact's photo. This should be an image file.\n\nFields that Cannot Be Updated\n  - id: Unique identifier for the contact, automatically generated.\n  - createdAt: Timestamp when the contact was created, managed by the system.\n  - updatedAt: Timestamp when the contact was last updated, managed by the system.\n  - userId: The ID of the user associated with the contact.\n\n### Security\n- This endpoint requires authentication.\n",
        "operationId": "updateContact",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the contact to be updated.",
            "example": "6779b9f903d039994c667196"
          }
        ],
        "requestBody": {
          "description": "Fields to update in the contact",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Contact's name",
                    "type": "string",
                    "example": "Oscar"
                  },
                  "email": {
                    "description": "Contact's email",
                    "type": "string",
                    "example": "ddj341@example.com"
                  },
                  "phoneNumber": {
                    "description": "Contact's phone number",
                    "type": "number",
                    "example": "+38000099004"
                  },
                  "contactType": {
                    "description": "Contact's type",
                    "type": "string",
                    "enum": [
                      "work",
                      "home",
                      "personal"
                    ],
                    "example": "home"
                  },
                  "isFavourite": {
                    "description": "Whether the contact is favourite",
                    "type": "boolean",
                    "example": false
                  },
                  "photo": {
                    "description": "Contact's photo",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated the contact!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "contact": {
        "type": "object",
        "required": [
          "name",
          "phoneNumber",
          "contactType"
        ],
        "properties": {
          "_id": {
            "description": "Contact's id",
            "type": "string",
            "example": "6779b9f903d039994c667196"
          },
          "userId": {
            "description": "ID of the user who owns the contact",
            "type": "string",
            "example": "675a2bdc1396640c2c39d34c"
          },
          "name": {
            "description": "The name of the contact",
            "type": "string",
            "example": "John Doe"
          },
          "phoneNumber": {
            "description": "The contact's phone number",
            "type": "number",
            "example": 38000099003
          },
          "contactType": {
            "description": "The category of the contact",
            "type": "string",
            "enum": [
              "work",
              "home",
              "personal"
            ],
            "example": "home"
          },
          "email": {
            "description": "The contact's email address",
            "type": "string",
            "example": "dd341@example.com"
          },
          "isFavourite": {
            "description": "Indicates whether the contact is marked as a favorite",
            "type": "boolean",
            "example": false
          },
          "photo": {
            "description": "URL to the contact's photo",
            "type": "string",
            "example": "https://res.cloudinary.com/dujidgmrx/image/upload/v1736030711/hp7r3hwcpxzrbpawbgjn.png"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message",
                    "errors"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bad request, body parameters are incorrect"
                    },
                    "errors": {
                      "type": "array",
                      "example": "Field is required"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found - Session or Authorization header not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404,
                  "description": "HTTP status code"
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError",
                  "description": "Error message indicating that the resource was not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Session not found",
                      "description": "Detailed message about the missing session or header"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "examples": {
              "no_token": {
                "summary": "Session not found",
                "value": {
                  "status": 404,
                  "message": "NotFoundError",
                  "data": {
                    "message": "Session not found"
                  }
                }
              },
              "token_expired": {
                "summary": "Authorization header not found",
                "value": {
                  "status": 404,
                  "message": "NotFoundError",
                  "data": {
                    "message": "Authorization header not found"
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "**Internal Server Error**\n\nAn unexpected error occurred on the server side. Please try again later.\n\n  - **message**: Detailed error message.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500,
                  "description": "HTTP status code indicating an internal server error"
                },
                "message": {
                  "type": "string",
                  "example": "InternalServerError",
                  "description": "Error message indicating an internal server issue"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server Error",
                      "description": "Detailed error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}